/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var C=(r,p)=>{for(var e in p)h(r,e,{get:p[e],enumerable:!0})},T=(r,p,e,t)=>{if(p&&typeof p=="object"||typeof p=="function")for(let n of E(p))!v.call(r,n)&&n!==e&&h(r,n,{get:()=>p[n],enumerable:!(t=b(p,n))||t.enumerable});return r};var S=r=>T(h({},"__esModule",{value:!0}),r);var w={};C(w,{default:()=>m});module.exports=S(w);var i=require("obsidian");var y=require("obsidian"),f={enabledpluginsgroup:[],enabledcsssnippets:[],pluginsgridtype:"list"};var m=class extends i.Plugin{async onload(){await this.loadSettings(),await this.saveSettings(),this.settingstabId=this.app.setting.settingTabs.map(e=>e.id),this.optionsId=["appearance","hotkeys","plugins","community-plugins"],this.optionsmenuEl=null,this.addNewSvgIcons(),await this.createSettingsOptionsMenu()}onunload(){this.deleteMenu(),this.saveSettings()}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async createSettingsOptionsMenu(){this.activeTab=this.app.setting.activeTab,this.activeTab&&this.optionsId.includes(this.app.setting.activeTab.id)&&this.createMenu(this.app.setting.activeTab.id);let e=this.app.setting;e.onOpen=()=>{e.openTabById(e.lastTabId)||e.openTab(e.settingTabs[0]),this.activeTab=e.activeTab,this.createMenu(this.activeTab.id)},e.settingTabs.forEach(async t=>{this.registerDomEvent(t.navEl,"click",()=>{e.openTabById(t.id)||e.openTab(t),this.createMenu(t.id)})})}createMenu(e){this.deleteMenu(),this.optionsId.includes(e)&&(this.createSwitcher(),this.createGridStyle(),(e==="appearance"||e==="community-plugins")&&(this.createSaveButton(),this.createSetConfigButton()))}deleteMenu(){this.optionsmenuEl&&(this.optionsmenuEl.remove(),this.optionsmenuEl=null,document.body.classList.remove("pm-show-enabled"),document.body.classList.remove("pm-show-disabled"),this.app.setting.activeTab.containerEl.classList.remove("pm-grid"))}addNewSvgIcons(){(0,i.addIcon)("toggle-center",'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-toggle-center"><rect width="20" height="12" x="2" y="6" rx="6" ry="6"/><circle cx="12" cy="12" r="2"/></svg>')}createSwitcher(){if(!this.optionsmenuEl){let n=this.app.setting.tabContentContainer||document.querySelector(".vertical-tab-content-container")||null;if(!n)return;this.optionsmenuEl=n.createEl("div",{attr:{class:"pm-tabs"}})}let e=this.optionsmenuEl.createEl("div",{attr:{class:"pm-tab",value:"switcher"}}),t=new i.ButtonComponent(e);document.body.classList.contains("pm-show-enabled")?(t.setIcon("toggle-right"),t.setTooltip("Enabled")):document.body.classList.contains("pm-show-disabled")?(t.setIcon("toggle-left"),t.setTooltip("Disabled")):(t.setIcon("toggle-center"),t.setTooltip("All")),t.onClick(()=>{document.body.classList.contains("pm-show-enabled")?(document.body.classList.remove("pm-show-enabled"),document.body.classList.add("pm-show-disabled"),t.setIcon("toggle-left"),t.setTooltip("Disabled")):document.body.classList.contains("pm-show-disabled")?(document.body.classList.remove("pm-show-disabled"),t.setIcon("toggle-center"),t.setTooltip("All")):(document.body.classList.add("pm-show-enabled"),t.setIcon("toggle-right"),t.setTooltip("Enabled"))})}createGridStyle(){if(!this.optionsmenuEl){let n=this.app.setting.tabContentContainer||document.querySelector(".vertical-tab-content-container")||null;if(!n)return;this.optionsmenuEl=n.createEl("div",{attr:{class:"pm-tabs"}})}let e=this.optionsmenuEl.createEl("div",{attr:{class:"pm-tab",value:"grid"}}),t=new i.ButtonComponent(e);this.settings.pluginsgridtype==="grid"?(this.app.setting.activeTab.containerEl.classList.add("pm-grid"),t.setIcon("layout-grid"),t.setTooltip("Grid layout")):(this.app.setting.activeTab.containerEl.classList.remove("pm-grid"),t.setIcon("menu"),t.setTooltip("List layout")),t.onClick(async()=>{this.settings.pluginsgridtype==="grid"?(this.app.setting.activeTab.containerEl.classList.remove("pm-grid"),t.setIcon("menu"),t.setTooltip("List layout"),this.settings.pluginsgridtype="list"):(this.app.setting.activeTab.containerEl.classList.add("pm-grid"),t.setIcon("layout-grid"),t.setTooltip("Grid layout"),this.settings.pluginsgridtype="grid"),await this.saveSettings()})}createSaveButton(){if(!this.optionsmenuEl)return;let e=this.optionsmenuEl.createEl("div",{attr:{class:"pm-tab",value:"save"}}),t=new i.ButtonComponent(e);t.setIcon("save"),t.setTooltip("Save current configuration."),t.onClick(async()=>{this.saveCurrentConfig(),await this.saveSettings()})}saveCurrentConfig(){switch(this.app.setting.lastTabId){case"appearance":this.saveCssSnippetsConfig();break;case"community-plugins":this.saveCommunityPluginsConfig();break;default:break}}createSetConfigButton(){if(!this.optionsmenuEl)return;let e=this.optionsmenuEl.createEl("div",{attr:{class:"pm-tab",value:"config"}});(0,i.setIcon)(e,"boxes"),this.app.setting.lastTabId==="community-plugins"?this.registerDomEvent(e,"click",()=>{this.createComPluginsConfigList()}):this.registerDomEvent(e,"click",()=>{this.createCssSnippetsConfigList()})}createCssSnippetsConfigList(){if(!this.optionsmenuEl)return;if(this.settings.enabledcsssnippets.length===0){new i.Notice("No saved configuration");return}this.configListEl=this.optionsmenuEl.createEl("div",{attr:{class:"pm-configs"}});let e=this.configListEl.createEl("div",{attr:{class:"pm-tab pm-config pm-config-close",value:"close-icon"}});(0,i.setIcon)(e,"x"),this.registerDomEvent(e,"click",()=>{this.configListEl&&this.configListEl.remove(),this.configListEl=null});for(let t=0;t<this.settings.enabledcsssnippets.length;t++){let n=this.configListEl.createEl("div",{attr:{class:"pm-tab pm-config",value:this.settings.enabledcsssnippets[t].id}}),s=new i.ButtonComponent(n);s.setIcon("puzzle"),s.setTooltip(this.settings.enabledcsssnippets[t].name),s.onClick(()=>{this.loadCssSnippetsConfig(this.settings.enabledcsssnippets[t]),this.configListEl&&this.configListEl.remove(),this.configListEl=null}),this.registerDomEvent(n,"contextmenu",l=>{l.preventDefault();let a=new i.Menu;a.addItem(o=>{o.setTitle("Delete").setIcon("trash"),o.onClick(()=>{this.settings.enabledcsssnippets.splice(t,1),n.remove(),this.saveSettings()})}),a.addItem(o=>{o.setTitle("Modify").setIcon("pencil"),o.onClick(()=>{this.renameCssSnippetsConfig(t)})}),a.showAtMouseEvent(l)})}}loadCssSnippetsConfig(e){var n;let t=this.app.setting.tabContentContainer.querySelectorAll(".setting-item.setting-item-heading:has(.clickable-icon) ~ .setting-item.mod-toggle");for(let s=0;s<t.length;s++){let l=t[s],a=(n=l.querySelector(".setting-item-name"))==null?void 0:n.textContent;if(a)if(e.enabledcsssnippets.includes(a)){let o=l.querySelector(".checkbox-container");o&&!o.classList.contains("is-enabled")&&o.click()}else if(e.enabledcsssnippets.includes(a))console.log(`Can't find snippet: ${a}`);else{let o=l.querySelector(".checkbox-container");o&&o.classList.contains("is-enabled")&&o.click()}}}renameCssSnippetsConfig(e){let t=new i.Modal(this.app).setTitle("Rename css snippets config");t.onOpen=()=>{let n="";new i.Setting(t.contentEl).setName("Config name").addText(s=>s.setPlaceholder(this.settings.enabledcsssnippets[e].name).onChange(l=>{n=l})).addButton(s=>s.setButtonText("Save").onClick(()=>{if(n===""){new i.Notice("Config name is empty.");return}else this.settings.enabledcsssnippets[e].name=n,this.saveSettings(),t.close()})),t.contentEl.find("input").focus()},t.open()}async saveCssSnippetsConfig(){let e=new i.Modal(this.app).setTitle("Add new css snippets config");e.onOpen=()=>{let t="";new i.Setting(e.contentEl).setName("Config name").addText(n=>n.onChange(s=>{t=s})).addButton(n=>n.setButtonText("Save").onClick(()=>{if(t===""){new i.Notice("Config name is empty.");return}else this.settings.enabledcsssnippets.push(this.createCurCssSnippetsConfig(this.app.setting.tabContentContainer,t)),this.saveSettings(),e.close()})),e.contentEl.find("input").focus()},e.open(),await this.saveSettings()}createCurCssSnippetsConfig(e,t){let n=e.querySelectorAll(".setting-item.setting-item-heading:has(.clickable-icon) ~ .setting-item.mod-toggle"),s=Array.from(n).map(l=>{var a;return((a=l.querySelector(".setting-item-name"))==null?void 0:a.textContent)||""});return{id:Date.now().toString(10),name:t,enabledcsssnippets:s,icontype:"lucide",icon:"puzzle"}}createComPluginsConfigList(){if(!this.optionsmenuEl)return;if(this.settings.enabledpluginsgroup.length===0){new i.Notice("No saved configuration");return}this.configListEl=this.optionsmenuEl.createEl("div",{attr:{class:"pm-configs"}});let e=this.configListEl.createEl("div",{attr:{class:"pm-tab pm-config pm-config-close",value:"close-icon"}});(0,i.setIcon)(e,"x"),this.registerDomEvent(e,"click",()=>{this.configListEl&&this.configListEl.remove(),this.configListEl=null});for(let t=0;t<this.settings.enabledpluginsgroup.length;t++){let n=this.configListEl.createEl("div",{attr:{class:"pm-tab pm-config",value:this.settings.enabledpluginsgroup[t].id}}),s=new i.ButtonComponent(n);s.setTooltip(this.settings.enabledpluginsgroup[t].name),s.setIcon(this.settings.enabledpluginsgroup[t].icon),s.onClick(async()=>{this.loadComPluginsConfig(this.settings.enabledpluginsgroup[t]),this.configListEl&&this.configListEl.remove(),this.configListEl=null}),this.registerDomEvent(n,"contextmenu",l=>{l.preventDefault();let a=new i.Menu;a.addItem(o=>{o.setTitle("Delete").setIcon("trash"),o.onClick(()=>{this.settings.enabledpluginsgroup.splice(t,1),this.saveSettings(),n.remove(),this.configListEl&&this.configListEl.children.length===1&&(this.configListEl.remove(),this.configListEl=null)})}),a.addItem(o=>{o.setTitle("Modify").setIcon("pencil"),o.onClick(()=>{this.modifyComPluginsConfig(t)})}),a.showAtMouseEvent(l)})}}modifyComPluginsConfig(e){let t=new i.Modal(this.app).setTitle("Modify plugins config");t.onOpen=()=>{let n="";new i.Setting(t.contentEl).setName("Config name").addText(g=>g.setPlaceholder(this.settings.enabledpluginsgroup[e].name).onChange(u=>{n=u})).addButton(g=>g.setButtonText("Save").onClick(()=>{if(n===""){new i.Notice("Config name is empty.");return}else this.settings.enabledpluginsgroup[e].name=n,this.settings.enabledpluginsgroup[e].icontype=s,this.settings.enabledpluginsgroup[e].icon=l,this.saveSettings(),t.close()}));let s=this.settings.enabledpluginsgroup[e].icontype,l=this.settings.enabledpluginsgroup[e].icon,a=new i.Setting(t.contentEl).setName("Config icon").setDesc("Accepts lucide icon.(Click the icon to refresh. Svg icon in the future.)"),o;a.addText(g=>{g.setValue(this.settings.enabledpluginsgroup[e].icon).onChange(u=>{l=u,(0,i.setIcon)(c,"refresh-cw")}),o=g.inputEl});let c=a.controlEl.createDiv({attr:{class:"pm-preview-icon"}});(0,i.setIcon)(c,this.settings.enabledpluginsgroup[e].icon),this.registerDomEvent(c,"click",()=>{s==="lucide"?(0,i.setIcon)(c,l):s==="svg"&&((0,i.addIcon)("newconfigicon",l),(0,i.setIcon)(c,l))}),t.contentEl.find("input").focus()},t.open()}loadComPluginsConfig(e){var n,s,l;if(!this.app.setting.settingTabs[6].installedPluginsEl)return;let t=this.app.setting.settingTabs[6].installedPluginsEl.childNodes;for(let a=0;a<t.length;a++){let o=t[a],c=(n=o.querySelector(".setting-item-name"))==null?void 0:n.textContent;if(!c)continue;let g=((l=(s=o.querySelector(".setting-item-description"))==null?void 0:s.lastChild)==null?void 0:l.textContent)||"",u=this.nameToId(c,g);if(u&&e.enabledplugins.includes(u)){let d=o.querySelector(".checkbox-container");d&&!d.classList.contains("is-enabled")&&d.click()}else if(u&&!e.enabledplugins.includes(u)){let d=o.querySelector(".checkbox-container");d&&d.classList.contains("is-enabled")&&d.click()}else console.log(`Can't find plugin: ${c}`)}}nameToId(e,t){return Object.keys(this.app.plugins.manifests).find(n=>this.app.plugins.manifests[n].name===e&&this.app.plugins.manifests[n].description===t)||""}saveCommunityPluginsConfig(){let e=new i.Modal(this.app).setTitle("Add new community plugins config");e.onOpen=()=>{let t="";new i.Setting(e.contentEl).setName("Config name").addText(c=>c.onChange(g=>{t=g})).addButton(c=>c.setButtonText("Save").onClick(()=>{if(t===""){new i.Notice("Config name is empty.");return}else this.settings.enabledpluginsgroup.push(this.createCurComPluginsConfig(this.app.plugins.enabledPlugins,t,n,s)),this.saveSettings(),e.close()}));let n="lucide",s="puzzle",l=new i.Setting(e.contentEl).setName("Config icon").setDesc("Accepts lucide icon.(Click the icon to refresh. Svg icon in the future.)"),a;l.addText(c=>{c.setValue(s).onChange(g=>{s=g,(0,i.setIcon)(o,"refresh-cw")}),a=c.inputEl});let o=l.controlEl.createDiv({attr:{class:"pm-preview-icon"}});(0,i.setIcon)(o,"puzzle"),this.registerDomEvent(o,"click",()=>{n==="lucide"?(0,i.setIcon)(o,s):n==="svg"&&((0,i.addIcon)("newconfigicon",s),(0,i.setIcon)(o,s))}),e.contentEl.find("input").focus()},e.open()}createCurComPluginsConfig(e,t,n,s){return{id:Date.now().toString(10),name:t,icontype:n,icon:s,enabledplugins:Array.from(e)}}};

/* nosourcemap */